# Ansible playbook to establish passwordless SSH login to remote hosts.
#
# fill in your environment information in the inventory file:
#
# ssh_key_filename: the filename of the SSH key to be generated
# remote_machine_username: the username of the remote host that you want to login as
# remote_machine_password: the password of that user on the remote host.
# [ssh_setup_group]: add the list of remote hosts you want to enable the passwordless login.

---
- hosts: ssh_setup_group
  gather_facts: false
  ignore_unreachable: yes

      # shell: "adduser --disabled-password --gecos \"\" {{remote_machine_username}}"
  tasks:
    - name: Add user on remote server
      user:
        name: "{{remote_machine_username}}"
        password: '$6$KXBor/O4alf2WAcN$CLrmPjCpx.Al1CTivc3IHLy0gPBB8OwKjtiwGasN23/HI60Z1yM.SmRPXH5/DwZu82jweGo1X8l4ySPzKT0Sw/' # hash of password generated by `mkpasswd` utility
        groups: # add to group `sudo` to be able manage server
         - sudo
        state: present
        shell: /bin/bash
        system: no
        createhome: yes
      with_items:
        - "{{ groups['ssh_setup_group']}}"

- hosts: localhost
  gather_facts: false

  tasks:
    - name: check .ssh local directory exists
      stat:
        path: "~/.ssh"
      register: ssh_directory_exists_check

    # - debug:
    #     var: ssh_directory_exists_check

    - name: Check needed OS tools exist
      shell: which sshpass ssh-keygen ssh-copy-id
      register: os_tools_exist
      ignore_errors: true
      changed_when: False

    - name: Fail execution if any of the needed OS tools is missing
      fail:
        msg: "One or more of the: sshpass, ssh-keygen, ssh-copy-id are missing on this machine. Please install them - using your distribution's recommended method - before continuing."
      when: os_tools_exist.rc != 0

    - name: Create ~/.ssh local directory
      file:
        path: "~/.ssh"
        state: directory
        mode: "0700"
      register: ssh_directory_creation
      when: ssh_directory_exists_check is defined and ssh_directory_exists_check.stat.exists == false

    # - debug:
    #     var: ssh_directory_creation

    - name: Check .ssh key file exists
      stat:
        path: "~/.ssh/{{item}}"
      register: ssh_key_file_exists_check
      with_items:
        - "{{ssh_key_filename}}"
        - "{{ssh_key_filename}}.pub"

    # - debug:
    #     var: ssh_key_file_exists_check.results[1].stat.exists

    - name: Generate ssh key on local machine
      shell: "ssh-keygen -t rsa -f ~/.ssh/{{ssh_key_filename}} -P \"\""
      register: ssh_key_creation
      failed_when: ssh_key_creation.rc != 0
      when: >
        ssh_key_file_exists_check is defined and
        (ssh_key_file_exists_check.results[0].stat.exists == false or
        ssh_key_file_exists_check.results[1].stat.exists == false)

    # - debug:
    #     var: ssh_key_creation

    - name: Check .ssh/config file exists
      stat:
        path: "~/.ssh/config"
      register: ssh_config_file_exists_check

    # - debug:
    #     var: ssh_config_file_exists_check

    - name: Create the ~/.ssh/config file
      file:
        path: "~/.ssh/config"
        state: touch
        mode: "0644"
      register: ssh_config_file_creation
      when: ssh_config_file_exists_check is defined and ssh_config_file_exists_check.stat.exists == false

    - name: Add the new ssh key to the ~/.ssh/config file
      lineinfile:
        path: "~/.ssh/config"
        line: "IdentityFile ~/.ssh/{{ssh_key_filename}}"
        state: present
        backup: yes
      register: ssh_config_file_key_addition

    # - debug:
    #     var: ssh_config_file_key_addition

    - name: Distribute the ssh key to the remote hosts
      shell: "sshpass -p \"{{remote_machine_password}}\" ssh-copy-id -o StrictHostKeyChecking=no -i ~/.ssh/{{ssh_key_filename}}.pub -p {{ hostvars[item].ansible_port }} \"{{remote_machine_username}}@{{ hostvars[item].ansible_host }}\""
      # register: ssh_copy_id_execution
      with_items:
        - "{{ groups['ssh_setup_group']}}"
      # failed_when: ssh_copy_id_execution.rc != 0
      ignore_errors: yes
      changed_when: false

    # - debug:
    #     var: ssh_copy_id_execution

- hosts: ssh_setup_group
  gather_facts: false
  ignore_unreachable: yes

  tasks:
    - name: Disable root login
      ansible.builtin.replace:
        path: /etc/ssh/sshd_config
        regexp: 'PermitRootLogin yes'
        replace: 'PermitRootLogin no'
      register: disable_root

    - name: Disable password authentication method
      ansible.builtin.replace:
        path: /etc/ssh/sshd_config
        regexp: 'PasswordAuthentication yes'
        replace: 'PasswordAuthentication no'
      register: disable_password_auth

    - name: Restart sshd.service
      service:
        name: sshd
        state: restarted
        enabled: yes
      when: disable_root.changed or disable_password_auth.changed
